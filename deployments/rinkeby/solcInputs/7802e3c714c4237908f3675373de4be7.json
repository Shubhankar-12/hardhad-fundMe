{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./PriceConverter.sol\";\nerror FundMe__NotOwner();\n\n/**@title A contract for crowd funding\n * @author Shubh Shubhankar\n * @notice This contract is to demo crowd funding\n * @dev This implements the price feeds as a library\n */\ncontract FundMe {\n    using PriceConverter for uint256;\n    uint256 public constant MIN_USD = 50 * 10**18;\n\n    mapping(address => uint256) public s_addressToamountFunded;\n    AggregatorV3Interface public s_priceFeed;\n    address[] public s_funders;\n    address public immutable i_owner;\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    modifier onlyOwner() {\n        // require(msg.sender == i_owner,\"Sender isn't the Owner\");\n        if (msg.sender != i_owner) {\n            revert FundMe__NotOwner();\n        }\n        _;\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(s_priceFeed) >= MIN_USD,\n            \"You need to spend more ETH!\"\n        );\n        s_funders.push(msg.sender);\n        s_addressToamountFunded[msg.sender] += msg.value;\n    }\n\n    function getAddressToAmountFunded(address fundingAddress) public view returns (uint256)\n    {\n        return s_addressToamountFunded[fundingAddress];\n    }\n\n    function withdraw() public onlyOwner {\n        for (uint256 i = 0; i < s_funders.length; i++) {\n            address funder = s_funders[i];\n            s_addressToamountFunded[funder] = 0;\n        }\n        s_funders = new address[](0);\n        // payable(msg.sender).transfer(address(this).balance);\n        // bool sendSuccess=payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess,\"Send failed!\");\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed!\");\n    }\n    function getVersion() public view returns (uint256) {\n        return s_priceFeed.version();\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n    function cheaperWithdraw() public payable onlyOwner{\n        address[] memory funders=s_funders;\n        for (uint i = 0; i < funders.length; i++) {\n            address funder=funders[i];\n            s_addressToamountFunded[funder]=0;\n        }\n        s_funders=new address[](0);\n        (bool success,)=i_owner.call{value:address(this).balance}(\"\");\n        require(success);\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter{\n    \n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        // ABI\n        // Address 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n        (,int256 answer,,,)=priceFeed.latestRoundData();\n        return uint256(answer * 10**10);\n    }\n    function getVersion(AggregatorV3Interface priceFeed) internal view returns(uint256){\n        return priceFeed.version();\n    }\n\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal view returns(uint256){\n        uint256 ethPrice=getPrice(priceFeed);\n        uint256 ethInUSD=(ethPrice*ethAmount)/(10**18);\n        return ethInUSD;\n    }\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}