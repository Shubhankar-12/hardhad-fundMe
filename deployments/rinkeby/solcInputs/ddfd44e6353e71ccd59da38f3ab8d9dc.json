{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport './PriceConverter.sol';\nerror notOwner();\ncontract FundMe{\n    using PriceConverter for uint256;\n    uint256 public constant MIN_USD=50 * 1e18;\n\n    mapping(address=>uint256) public addressToamountFunded;\n    AggregatorV3Interface public priceFeed;\n    address[] public funders;\n    address public immutable i_owner;\n    constructor(address priceFeedAddress){\n        i_owner=msg.sender;\n        priceFeed=AggregatorV3Interface(priceFeedAddress);\n\n    }\n\n    function fund() public payable{\n        require(msg.value.getConversionRate(priceFeed) >= MIN_USD,\"Didn't send enough eth\");\n        funders.push(msg.sender);\n        addressToamountFunded[msg.sender] +=msg.value;\n    }\n    \n\n    function withdraw() onlyOwner public{\n        for(uint256 i=0;i<funders.length;i++)\n        {\n            address funder=funders[i];\n            addressToamountFunded[funder]=0;\n        }\n        funders=new address[](0);\n        // payable(msg.sender).transfer(address(this).balance);\n        // bool sendSuccess=payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess,\"Send failed!\");\n        (bool callSuccess,)=payable(msg.sender).call{value:address(this).balance}(\"\");\n        require(callSuccess,\"Call failed!\");\n    }\n    modifier onlyOwner{\n        // require(msg.sender == i_owner,\"Sender isn't the Owner\");\n        if(msg.sender != i_owner)\n        {\n            revert notOwner();\n        }\n        _;\n    }\n    receive() external payable{\n        fund();\n    }\n    fallback() external payable{\n        fund();\n    }\n\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter{\n    \n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        // ABI\n        // Address 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n        (,int256 price,,,)=priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n    function getVersion(AggregatorV3Interface priceFeed) internal view returns(uint256){\n        return priceFeed.version();\n    }\n\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal view returns(uint256){\n        uint256 ethPrice=getPrice(priceFeed);\n        uint256 ethInUSD=(ethPrice*ethAmount)/1e18;\n        return ethInUSD;\n    }\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}